import urllib.parse
from time import sleep

import telebot
import types
import os
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage

from users_requests import get_db_connection, add_user_to_base, upd_user_name, get_user_role, upd_user_role

from settings_requests import add_user_settings, get_user_message_to_edit, upd_user_message_to_edit, get_user_city, upd_user_city, get_user_distance, upd_user_distance, get_user_last_request, upd_user_last_request
from settings_requests import upd_user_status, get_user_status

from commet_requests import add_comment

from secret import tg_api
apishka = os.environ.get("TELEGRAM_API_TOKEN", tg_api)
state_storage = StateMemoryStorage()
tb = telebot.TeleBot(apishka, state_storage=state_storage)

def start(message):
    """Sends start message | –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    tb.delete_message(user_id, message_id=message.id)

    with get_db_connection() as conn:
        add_user_to_base(conn, user_id, user_name)
        add_user_settings(conn, user_id)
    
    with get_db_connection() as conn:
        upd_user_status(conn, user_id, "start")
    
    sent_massage = tb.send_message(user_id,
            f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—ã–µ –º–µ—Å—Ç–∞ –≤ –≥–æ—Ä–æ–¥–µ! –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —á—Ç–æ —è —É–º–µ—é, –Ω–∞–ø–∏—à–∏ /help")
    print(f"sent_massage is {sent_massage.id}")
    with get_db_connection() as conn:
        upd_user_message_to_edit(conn, user_id, sent_massage.id)

def help(message):
    """Helps user to understand how it works | –ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç—å –∫–∞–∫ –æ–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç"""
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    
    prev_message = 0
    with get_db_connection() as conn:
        prev_message = get_user_message_to_edit(conn, user_id)

    print(f"\tkek sent_massage is {prev_message}")
    tb.delete_message(user_id, message.message_id)
    tb.edit_message_text("–ù–∞–ø–∏—à–∏ –º–µ—Å—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '—Å–ª—É—á–∞–π–Ω–æ', —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –º–µ—Å—Ç–æ", chat_id=message.chat.id, message_id=prev_message)

def place(message):
    """Gets user"s request for place | –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –º–µ—Å—Ç–æ"""
    user_id = message.from_user.id
    user_name = message.from_user.first_name

    prev_message = 0
    with get_db_connection() as conn:
        prev_message = get_user_message_to_edit(conn, user_id)

    tb.delete_message(user_id, message.message_id)
    
    with get_db_connection() as conn:
        upd_user_last_request(conn, user_id, message.text)

    if message.text == "—Å–ª—É—á–∞–π–Ω–æ" or message.text == "–°–ª—É—á–∞–π–Ω–æ":
        tb.edit_message_text("–Ω–µ, —á–µ—Ç –Ω–µ —Ö–æ—á—É –ø–æ–∫–∞", chat_id=message.chat.id, message_id=prev_message)
    else:
        tb.edit_message_text(f"–ò—â–µ–º –º–µ—Å—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {message.text}", chat_id=message.chat.id, message_id=prev_message)
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        button = KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
        markup.add(button)
        tb.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º:", reply_markup=markup)

def user_settings(message):
    """–ø–æ–ª—É—á–∏—Ç—å –∏–∑ –±–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤ —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Å—Ç–≤–∏—è, –∑–∞–Ω–µ—Å—Ç–∏ –¥–µ—Ñ–æ–ª—å"""
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    print(message.id)
    tb.delete_message(user_id, message.id)
    markup = InlineKeyboardMarkup()
    markup.row_width = 4
    markup.add(InlineKeyboardButton("üó∫Ô∏èWIP", callback_data="distance"),
               InlineKeyboardButton("‚≠ê", callback_data="rating"),
               InlineKeyboardButton("üí¨", callback_data="comments"))
    tb.send_message(user_id, "–¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", reply_markup=markup)

def operator(call):
    """—Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    user_id = call.from_user.id
    if call.data == "distance":
        with get_db_connection() as conn:
            upd_user_status(conn, "distance")
        tb.send_message(user_id, "–ù–∞–ø–∏—à–∏ –∂–µ–ª–∞–µ–º–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —á–∏—Å–ª–æ–º –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")
        #—Ä–µ–∞–ª–∏–∑—É–π try except –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ / –≥–æ—Ä–æ–¥
    if call.data == "rating":
        with get_db_connection() as conn:
            upd_user_status(conn, "rating")
        tb.send_message(user_id, "–ù–∞–ø–∏—à–∏ –æ—Ü–µ–Ω–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –º–µ—Å—Ç—É –æ—Ç 1 –¥–æ 10")
    if call.data == "comments":
        with get_db_connection() as conn:
            upd_user_status(conn, "comments")
        tb.send_message(user_id, "–ú–ê–®–ò–ù–ê –ü–û–õ–û–ñ–ò –ë–ê–ù–ö–û–ú–ê–¢!!!!")
    if call.data in {"r1", "r2", "r3", "r4", "r5"}:
        with get_db_connection() as conn:
            upd_user_status(conn, user_id, call.data)
        tb.send_message(user_id, "–ù–∞–ø–∏—à–∏ –æ—Ü–µ–Ω–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –º–µ—Å—Ç—É –æ—Ç 1 –¥–æ 10")
    if call.data in {"c1", "c2", "c3", "c4", "c5"}:
        with get_db_connection() as conn:
            upd_user_status(conn, user_id, call.data)
        tb.send_message(user_id, "–ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å")


def change_distance(message):
    """–º–µ–Ω—è–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç"""
    if message.isdigit():
        print(int(message))
        with get_db_connection() as conn:
            upd_user_distance(conn, int(message))
    else:
        with get_db_connection() as conn:
            upd_user_city(conn, message)
    with get_db_connection() as conn:
        upd_user_status(conn, "start")

from costil import ids

from commet_requests import edit_comment_rating
from commet_requests import commented_by_user, edit_comment
from commet_requests import edit_comment_text
def set_rating(message):
    user_id = message.from_user.id
    tb.delete_message(user_id, message.id - 1)
    tb.delete_message(user_id, message.id)

    with get_db_connection() as conn:
        status = get_user_status(conn, user_id)
    
    needed_place = int(status[-1])
    place_id = ids[needed_place]
    if message.text.isdigit():
        print(int(message.text))
        with get_db_connection() as conn:
            if (commented_by_user(conn, user_id, place_id)):
                edit_comment_rating(conn, user_id, place_id, int(message.text))
            else:
                add_comment(conn, user_id, place_id, "NULL", int(message.text))
    else:
        print("needed to do try exept")

    
    sent_massage = tb.send_message(user_id,
            f"—Ç–≤–æ—è –æ—Ü–µ–Ω–∫–∞ —É—á—Ç–µ–Ω–∞)")
    sleep(1)
    tb.delete_message(user_id, sent_massage.id)
    
    with get_db_connection() as conn:
        upd_user_status(conn, user_id, "start")

def set_comment(message):
    user_id = message.from_user.id
    tb.delete_message(user_id, message.id - 1)
    tb.delete_message(user_id, message.id)

    with get_db_connection() as conn:
        status = get_user_status(conn, user_id)
    
    needed_place = int(status[-1])
    place_id = ids[needed_place]
    with get_db_connection() as conn:
        if (commented_by_user(conn, user_id, place_id)):
            edit_comment_text(conn, user_id, place_id, message.text)
        else:
            add_comment(conn, user_id, place_id, message.text, 5)
    
    
    sent_massage = tb.send_message(user_id,
            f"—Ç–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—á—Ç–µ–Ω)")
    sleep(1)
    tb.delete_message(user_id, sent_massage.id)
    
    with get_db_connection() as conn:
        upd_user_status(conn, user_id, "start")

def get_yandex_maps_link(address):
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    clean_address = (address
                     .replace("—É–ª.", "—É–ª–∏—Ü–∞")
                     .replace("–¥.", "–¥–æ–º")
                     .replace("–∫–æ—Ä–ø.", "–∫–æ—Ä–ø—É—Å")
                     .strip())

    # –ö–æ–¥–∏—Ä—É–µ–º –¥–ª—è URL (–Ω–æ –Ω–µ –¥–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ %20)
    encoded_address = urllib.parse.quote_plus(clean_address)
    return f"https://yandex.ru/maps/?text={encoded_address}"